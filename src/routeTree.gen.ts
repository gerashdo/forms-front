/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as TemplatesIndexImport } from './routes/templates/index'
import { Route as TemplatesTemplateIdImport } from './routes/templates/$templateId'

// Create Virtual Routes

const AuthLazyImport = createFileRoute('/auth')()

// Create/Update Routes

const AuthLazyRoute = AuthLazyImport.update({
  path: '/auth',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/auth.lazy').then((d) => d.Route))

const IndexRoute = IndexImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const TemplatesIndexRoute = TemplatesIndexImport.update({
  path: '/templates/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/templates/index.lazy').then((d) => d.Route),
)

const TemplatesTemplateIdRoute = TemplatesTemplateIdImport.update({
  path: '/templates/$templateId',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/templates/$templateId.lazy').then((d) => d.Route),
)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/auth': {
      id: '/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthLazyImport
      parentRoute: typeof rootRoute
    }
    '/templates/$templateId': {
      id: '/templates/$templateId'
      path: '/templates/$templateId'
      fullPath: '/templates/$templateId'
      preLoaderRoute: typeof TemplatesTemplateIdImport
      parentRoute: typeof rootRoute
    }
    '/templates/': {
      id: '/templates/'
      path: '/templates'
      fullPath: '/templates'
      preLoaderRoute: typeof TemplatesIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/auth': typeof AuthLazyRoute
  '/templates/$templateId': typeof TemplatesTemplateIdRoute
  '/templates': typeof TemplatesIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/auth': typeof AuthLazyRoute
  '/templates/$templateId': typeof TemplatesTemplateIdRoute
  '/templates': typeof TemplatesIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/auth': typeof AuthLazyRoute
  '/templates/$templateId': typeof TemplatesTemplateIdRoute
  '/templates/': typeof TemplatesIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/auth' | '/templates/$templateId' | '/templates'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/auth' | '/templates/$templateId' | '/templates'
  id: '__root__' | '/' | '/auth' | '/templates/$templateId' | '/templates/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthLazyRoute: typeof AuthLazyRoute
  TemplatesTemplateIdRoute: typeof TemplatesTemplateIdRoute
  TemplatesIndexRoute: typeof TemplatesIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthLazyRoute: AuthLazyRoute,
  TemplatesTemplateIdRoute: TemplatesTemplateIdRoute,
  TemplatesIndexRoute: TemplatesIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/auth",
        "/templates/$templateId",
        "/templates/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/auth": {
      "filePath": "auth.lazy.tsx"
    },
    "/templates/$templateId": {
      "filePath": "templates/$templateId.tsx"
    },
    "/templates/": {
      "filePath": "templates/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
